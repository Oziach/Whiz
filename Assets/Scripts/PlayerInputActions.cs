//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""DefaultMap"",
            ""id"": ""55358c38-2899-4f17-97fe-be429efcd438"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""40279c73-cc32-4c71-8ba1-8c11d11d8fc3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Spellcast"",
                    ""type"": ""Button"",
                    ""id"": ""7aca4a4a-f7fc-4d65-b1e6-4173e86748fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gravcast"",
                    ""type"": ""Button"",
                    ""id"": ""1b6e6678-7162-41a4-8328-b4df229b5813"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateGravityRight"",
                    ""type"": ""Button"",
                    ""id"": ""04742910-8610-418d-88af-34389f6d1145"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateGravityLeft"",
                    ""type"": ""Button"",
                    ""id"": ""88e1e9be-9b0b-4e2b-9a03-6a49e1d02621"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateGravityUp"",
                    ""type"": ""Button"",
                    ""id"": ""f28df027-3d8e-44fe-97b3-bdbf9be931e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateGravityDown"",
                    ""type"": ""Button"",
                    ""id"": ""ec37b1bc-5fe5-4110-a216-7fb8441a1dce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""7ad56630-6436-4b38-bcc9-79027648a446"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""9e025458-fa1e-4b43-89fd-08a2806cc727"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fec6f18c-f25a-4669-9d73-917c3d3b665b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b1ba38cc-d454-4320-8d38-cac32b307499"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""65a6909c-3bed-4ccf-9be5-455315911597"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c8df35c7-351e-453e-b8aa-bd52b8556def"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""857eff52-e190-4369-b152-d43bc2ef8962"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spellcast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6149a334-e4dc-4615-ac96-e9b4ddeffed7"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spellcast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65064990-4fa9-4682-8149-a890a7eb46b4"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spellcast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dfd0777e-c28d-4dd7-89a1-d9645f691980"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gravcast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b5e70316-46c0-4ee4-8222-60cc19c3915a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gravcast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d833fb1d-289b-4cb9-af17-089d03f4e3fe"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gravcast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9228811c-ed4e-409d-816c-1f65f8293141"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateGravityRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8fc24c3-b9a4-4a85-ab30-cec0de9198c5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateGravityLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1982a656-5cde-4e48-91e1-47219408e40b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateGravityUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d7c275d-d745-4f1e-a183-b7597c505ca0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateGravityDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad59fb6b-c0a1-4872-81ce-456809c86f4b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        }
    ]
}");
        // DefaultMap
        m_DefaultMap = asset.FindActionMap("DefaultMap", throwIfNotFound: true);
        m_DefaultMap_Movement = m_DefaultMap.FindAction("Movement", throwIfNotFound: true);
        m_DefaultMap_Spellcast = m_DefaultMap.FindAction("Spellcast", throwIfNotFound: true);
        m_DefaultMap_Gravcast = m_DefaultMap.FindAction("Gravcast", throwIfNotFound: true);
        m_DefaultMap_RotateGravityRight = m_DefaultMap.FindAction("RotateGravityRight", throwIfNotFound: true);
        m_DefaultMap_RotateGravityLeft = m_DefaultMap.FindAction("RotateGravityLeft", throwIfNotFound: true);
        m_DefaultMap_RotateGravityUp = m_DefaultMap.FindAction("RotateGravityUp", throwIfNotFound: true);
        m_DefaultMap_RotateGravityDown = m_DefaultMap.FindAction("RotateGravityDown", throwIfNotFound: true);
        m_DefaultMap_Escape = m_DefaultMap.FindAction("Escape", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DefaultMap
    private readonly InputActionMap m_DefaultMap;
    private List<IDefaultMapActions> m_DefaultMapActionsCallbackInterfaces = new List<IDefaultMapActions>();
    private readonly InputAction m_DefaultMap_Movement;
    private readonly InputAction m_DefaultMap_Spellcast;
    private readonly InputAction m_DefaultMap_Gravcast;
    private readonly InputAction m_DefaultMap_RotateGravityRight;
    private readonly InputAction m_DefaultMap_RotateGravityLeft;
    private readonly InputAction m_DefaultMap_RotateGravityUp;
    private readonly InputAction m_DefaultMap_RotateGravityDown;
    private readonly InputAction m_DefaultMap_Escape;
    public struct DefaultMapActions
    {
        private @PlayerInputActions m_Wrapper;
        public DefaultMapActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_DefaultMap_Movement;
        public InputAction @Spellcast => m_Wrapper.m_DefaultMap_Spellcast;
        public InputAction @Gravcast => m_Wrapper.m_DefaultMap_Gravcast;
        public InputAction @RotateGravityRight => m_Wrapper.m_DefaultMap_RotateGravityRight;
        public InputAction @RotateGravityLeft => m_Wrapper.m_DefaultMap_RotateGravityLeft;
        public InputAction @RotateGravityUp => m_Wrapper.m_DefaultMap_RotateGravityUp;
        public InputAction @RotateGravityDown => m_Wrapper.m_DefaultMap_RotateGravityDown;
        public InputAction @Escape => m_Wrapper.m_DefaultMap_Escape;
        public InputActionMap Get() { return m_Wrapper.m_DefaultMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultMapActions set) { return set.Get(); }
        public void AddCallbacks(IDefaultMapActions instance)
        {
            if (instance == null || m_Wrapper.m_DefaultMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DefaultMapActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Spellcast.started += instance.OnSpellcast;
            @Spellcast.performed += instance.OnSpellcast;
            @Spellcast.canceled += instance.OnSpellcast;
            @Gravcast.started += instance.OnGravcast;
            @Gravcast.performed += instance.OnGravcast;
            @Gravcast.canceled += instance.OnGravcast;
            @RotateGravityRight.started += instance.OnRotateGravityRight;
            @RotateGravityRight.performed += instance.OnRotateGravityRight;
            @RotateGravityRight.canceled += instance.OnRotateGravityRight;
            @RotateGravityLeft.started += instance.OnRotateGravityLeft;
            @RotateGravityLeft.performed += instance.OnRotateGravityLeft;
            @RotateGravityLeft.canceled += instance.OnRotateGravityLeft;
            @RotateGravityUp.started += instance.OnRotateGravityUp;
            @RotateGravityUp.performed += instance.OnRotateGravityUp;
            @RotateGravityUp.canceled += instance.OnRotateGravityUp;
            @RotateGravityDown.started += instance.OnRotateGravityDown;
            @RotateGravityDown.performed += instance.OnRotateGravityDown;
            @RotateGravityDown.canceled += instance.OnRotateGravityDown;
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
        }

        private void UnregisterCallbacks(IDefaultMapActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Spellcast.started -= instance.OnSpellcast;
            @Spellcast.performed -= instance.OnSpellcast;
            @Spellcast.canceled -= instance.OnSpellcast;
            @Gravcast.started -= instance.OnGravcast;
            @Gravcast.performed -= instance.OnGravcast;
            @Gravcast.canceled -= instance.OnGravcast;
            @RotateGravityRight.started -= instance.OnRotateGravityRight;
            @RotateGravityRight.performed -= instance.OnRotateGravityRight;
            @RotateGravityRight.canceled -= instance.OnRotateGravityRight;
            @RotateGravityLeft.started -= instance.OnRotateGravityLeft;
            @RotateGravityLeft.performed -= instance.OnRotateGravityLeft;
            @RotateGravityLeft.canceled -= instance.OnRotateGravityLeft;
            @RotateGravityUp.started -= instance.OnRotateGravityUp;
            @RotateGravityUp.performed -= instance.OnRotateGravityUp;
            @RotateGravityUp.canceled -= instance.OnRotateGravityUp;
            @RotateGravityDown.started -= instance.OnRotateGravityDown;
            @RotateGravityDown.performed -= instance.OnRotateGravityDown;
            @RotateGravityDown.canceled -= instance.OnRotateGravityDown;
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
        }

        public void RemoveCallbacks(IDefaultMapActions instance)
        {
            if (m_Wrapper.m_DefaultMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDefaultMapActions instance)
        {
            foreach (var item in m_Wrapper.m_DefaultMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DefaultMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DefaultMapActions @DefaultMap => new DefaultMapActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IDefaultMapActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnSpellcast(InputAction.CallbackContext context);
        void OnGravcast(InputAction.CallbackContext context);
        void OnRotateGravityRight(InputAction.CallbackContext context);
        void OnRotateGravityLeft(InputAction.CallbackContext context);
        void OnRotateGravityUp(InputAction.CallbackContext context);
        void OnRotateGravityDown(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
    }
}
